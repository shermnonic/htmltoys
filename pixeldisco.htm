<!DOCTYPE html>
<!-- www.386dx25.de 2016 -->
<html lang="en">
<head><meta charset="utf-8"/>
<title>Hypnotoads pixel disco</title>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<meta name="author" content="386dx25, mnemonic@386dx25.de"/>
<meta name="description" content="Play with my favourite pixel noise effect in an interactive HTML5 canvas." />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@386dx25" />
<meta name="twitter:title" content="Hypnotoads pixel disco" />
<meta name="twitter:description" content="A simple pixel noise effect." />
<meta name="twitter:image" content="https://shermnonic.github.io/htmltoys/img/pixeldisco.png" />
<style>
.wrapper {
  text-align: center;
  z-index: 10;
  background-color: rgba(255,255,255,0.9);
  width: 90%;
  max-width: 512px;
  margin: auto;
  border-radius: 5px;
  margin-top: 2em;
}
footer {
  width: 100%;
  position: absolute;
  left: 0px;
  bottom: 0px;
  text-align: center;
  background-color: rgba(255,255,255,0.8);
}
@media (prefers-color-scheme: dark) {
  body {
    color: white;
    background: #121212;
  }
  a { color: pink; }
  .wrapper {
    background-color: rgba(0,0,0,0.7);
  }
  footer {
    background-color: rgba(0,0,0,0.5);
  }
}
h1 {
  font-size: 140%;
  padding-top: 0.5em;
}
canvas { /* https://belenalbeza.com/retro-crisp-pixel-art-in-html-5-games/ */
  image-rendering: -moz-crisp-edges;
  image-rendering: -webkit-crisp-edges;
  image-rendering: crisp-edges;
  image-rendering: pixelated;
}
#canvas {
  width: 100%;
  max-width: 512px;
  display: none;
}
#matrix {
  width: 15%;
  height: 15%;
  min-width: 75px;
  min-height: 75px;
  max-width: 96px;
}
#background {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  z-index: -1;
  padding: 0;
}
input[type=range] {
  width: 100%;
  max-width: 500px;
}
.button {
  border: 1px solid gray;
  border-radius: 4px;
  padding: 2px;
  width: 6em;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  margin: 2px 12px;
  cursor: pointer;
}
.button:hover {
transition: 0.5s;
  background-color: #1569C7;
  color: white;
}
.container {
  display: flex;
  flex-direction: row;
  justify-content: center;
  text-align: left;
}
</style>
</head>
<body onresize="resize()">
<canvas id="background" width="120" height="240"></canvas>
<div class="wrapper">
  <header><h1>Hypnotoads pixel disco</h1></header>
  <div class="container">
    <canvas id="matrix" width="5" height="5"></canvas>
    <form id="radio">
      <div><input type="button" class="button" name="kernel" value="random" autofocus /></div>
      <div><input type="button" class="button" name="kernel" value="box" /></div>
      <div><input type="button" class="button" name="kernel" value="cross" /></div>
    </form>
  </div>
    <div>
      <input id="slider" type="range"  min="0" max="2048" step="8" value="0">
      <input id="spin"   type="number" min="0" max="2048" step="1" value="0" style="text-align: center;">
    </div>
    <div style="text-align: right">
      <a href="#" id="permalink">[permalink]</a>
    </div>
  <canvas id="canvas" width="128" height="128"></canvas>
</div>
<footer>
  <p>
    by <a href="http://www.386dx25.de">386dx25.de</a>, 2016<br>
    (<a href="https://github.com/shermnonic/htmltoys/blob/main/pixeldisco.htm#L346">source code</a>,
     <a href="https://dwitter.net/d/25946">dweet</a>,
     <a href="https://gist.github.com/shermnonic/c6e1a01bd9b7ca60251f873ffffcda88">x86 asm</a>,
     <a href="https://386dx25.de/dos/">dosbox</a>)
  </p>
</footer>
<script>
var canvas     = document.getElementById('canvas');
var background = document.getElementById('background');
var ctx    = canvas.getContext('2d');
var width  = canvas.width;
var height = canvas.height;
var buffer = ctx.getImageData(0,0,width,height);
var fps = 25;
var clear = true;
var vertical_layout = true;
var matrix = document.getElementById('matrix');
var spin   = document.getElementById('spin');
var slider = document.getElementById('slider');
var radio  = document.getElementById('radio');
var permalink = document.getElementById('permalink');

// the magic constant
var con = 1111;

// the current filter kernel
var kernel = new Array(5*5);
const hw = 2; // half-width of kernel
var weight = 1.0; // the weight to normalize filter+constant
var kernel_name = '';


function kernel_to_string(k) {
  let s = '';
  for( var i=0; i < k.length; ++i ) {
    s += Math.floor(k[i]*255);
    if( i < k.length-1 ) s += ',';
  }
  return s;
}

function kernel_from_string(s) {
  let k = new Array(5*5);
  let tokens = s.split(',',k.length);  
  if( tokens && tokens.length == k.length ) {
    for( var i=0; i < k.length; ++i ) { 
      k[i] = parseInt(tokens[i])/255.0;
    }
    return k;
  }
  return null;
}

function parse_query_string() {
  // parse url parameters
  let params = new URLSearchParams(document.location.search.substring(1));  
  kernel_in = params.get("kernel");
  con_in = parseInt(params.get("con"));
  data_in = params.get("data");
  if(kernel_in) set_kernel(kernel_in);
  if(con_in) con = con_in;
  if(data_in) {
    let k = kernel_from_string(data_in);
    if(k)
      set_kernel_data(k);
    else
      console.log('Kernel data malformed');
  }
}

function update_permalink() {
  if(permalink) {
    let query_string = '?' + 'kernel=' + kernel_name + '&con=' + con;
    if( kernel_name==='data' || kernel_name==='random') 
      query_string += '&data=' + kernel_to_string(kernel);
    permalink.href = '//' + location.host + location.pathname + query_string;
  }
}


function draw_matrix( m ) {
  var ctx = matrix.getContext('2d');
  var buffer = ctx.getImageData(0,0,matrix.width,matrix.height);
  var data = buffer.data;
  for( var i=0; i < m.length; ++i ) {
    val = m[i]*255 & 255
    data[i*4+0] = val;
    data[i*4+1] = val;
    data[i*4+2] = val;
    data[i*4+3] = 255;
  }
  ctx.putImageData( buffer, 0,0 );
}

function update_kernel() {
  weight = 0.;
  for( var i=0; i < kernel.length; ++i )
    weight += kernel[i];
    
  draw_matrix(kernel);
  
  update_permalink();
}

function set_kernel_data( k ) {
  if(k && k.length == kernel.length)
    for(var i=0; i < kernel.length; ++i)
      kernel[i] = k[i];
  update_kernel();
}

function set_kernel( name ) {
  switch (name) {
  default:
  case 'random':
    for( var i=0; i < kernel.length; ++i )
      kernel[i] = Math.random();
    break;
  case 'box':
    kernel = [ .0, .0, .0, .0, .0,
         .0,  1,  1,  1, .0,
         .0,  1,  0,  1, .0,
         .0,  1,  1,  1, .0,
         .0, .0, .0, .0, .0 ];
    break;
  case 'cross':
    kernel = [ .0, .0, .0, .0, .0,
         .0, .0,  1, .0, .0,
         .0,  1,  0,  1, .0,
         .0, .0,  1, .0, .0,
         .0, .0, .0, .0, .0 ];
    break;
  }
  kernel_name = name;
  update_kernel();
}


function getPositionInCanvas(canvas, e, ec) {
    let rect = canvas.getBoundingClientRect(e);
    return {
        x: (ec.clientX - rect.left) * (canvas.width  / rect.width),
        y: (ec.clientY - rect.top)  * (canvas.height / rect.height)
    }
}

// allow editing of kernel matrix via mouse
function mousefunc(e) {
  pos = getPositionInCanvas(matrix, e, e);
  var x = Math.floor( pos.x );
  var y = Math.floor( pos.y );
  if( x>=0 && x<5 && y>=0 && y<5 ) {
    if( kernel[y*5+x] > 0.5 ) kernel[y*5+x]=0.0; else kernel[y*5+x] = 1.0;
    kernel_name = 'data';
    update_kernel();
  }
}


function init() {
  set_kernel('random');

  parse_query_string();
  
  if( spin ) {
    spin.oninput = function() {
      con = +this.value;
      update_permalink();
      if(slider) slider.value = con;
    }
    spin.value = con;
  }

  if( slider ) {
    slider.oninput = function() {
      con = +this.value;
      update_permalink();
      if(spin) spin.value = con;
    }
    slider.value = con;
  }

  if( radio ) {
    for( var i=0; i < radio.length; ++i ) {
      radio[i].onclick = function() {
        set_kernel( this.value );
      }
    }
  }  
  
  window.addEventListener('resize', resize, false);  
  canvas    .addEventListener("mousedown", function(e) { clear=true; }, false);
  background.addEventListener("mousedown", function(e) { clear=true; }, false);
  matrix    .addEventListener("mousedown", function(e) { mousefunc(e) }, false); 
  // http://stackoverflow.com/questions/2368784/draw-on-html5-canvas-using-a-mouse
  
  // start rendering
  resize();
  window.requestAnimationFrame( update );
}

function resize() {
  vertical_layout = window.innerWidth > window.innerHeight;
  background.width = 2*canvas.width-16;
  background.height = 2*canvas.height-16;
  if( vertical_layout )
  {
    background.style.width = "100%";
    background.style.height = "auto";
  }
  else
  {
    background.style.width = "auto";
    background.style.height = "100%";
  }
  draw();
}

function update() {
  // http://codetheory.in/controlling-the-frame-rate-with-requestanimationframe/
  setTimeout(function() {
    window.requestAnimationFrame( update );
    draw();
  }, 1000 / fps);
}

function draw() {
  var data = buffer.data;
  var ofs = 0;
  var rowofs = width*4;
  for( y=0; y < height; y++ ) {
    for( x=0; x < width; x++ ) {
      var val=0;
      var alpha=255;
      if( clear ) {
        val=255;
      }
      else
      {
        if( x>hw && x<(width-hw) && y>hw && y<(height-hw) ) {
          // Convolve with kernel "in-place"
          var mi=0;
          for( row=0; row < 2*hw+1; ++row ) {
            for( col=0; col < 2*hw+1; ++col ) {
              val += data[2+ofs + (row-hw)*rowofs + (col-hw)*4] * kernel[mi++];
            }
          }
          val = ((val + con) / weight) % 256;
          alpha = 255;
        }
        else 
        {
          // Random seed on border
          val = Math.floor(Math.random()*256);
          alpha = 0;
        }
      }
      data[ofs++] = val; // R
      data[ofs++] = val; // G
      data[ofs++] = val; // B
      data[ofs++] = alpha; // A
    }
  }
  ctx.putImageData( buffer, 0,0 );

  // update background
  bg_ctx = background.getContext('2d');
  if( bg_ctx ) {
    bg_ctx.drawImage( canvas, 4, 4, width-8, height-8, 0, 0, width-8, height-8 );
    bg_ctx.drawImage( canvas, 4, 4, width-8, height-8, width-8, 0, width-8, height-8 );
    bg_ctx.drawImage( canvas, 4, 4, width-8, height-8, 0, height-8, width-8, height-8 );
    bg_ctx.drawImage( canvas, 4, 4, width-8, height-8, width-8, height-8, width-8, height-8 );
  }
  
  clear=false;
}

init();
</script>
</body>
</html>