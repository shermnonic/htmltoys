<!DOCTYPE html>
<!-- www.386dx25.de 2020 -->
<html lang="en">
<head><meta charset="utf-8"/>
<title>sinescans2</title>
<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no"/>
<meta name="author" content="386dx25, mnemonic@386dx25.de"/>
<meta name="description" property="og:description" content="A classic function plotter with a twist." />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@386dx25" />
<meta name="twitter:title" content="sinescans2" />
<meta name="twitter:description" content="A classic function plotter with a twist." />
<meta name="twitter:image" content="https://shermnonic.github.io/htmltoys/img/sinescans2.png" />
<meta property="og:image" content="https://386dx25.de/krsopka_b/pages/FRONT.png" />
<style>
html, body {
  width:  100%;
  height: 95%;
  margin: 0;
  text-align: center;
}
button {
  background: none; 
  border: none; 
  position: fixed; 
  top: 5px; 
  right: 5px; 
  color:#aaa
}
h1 {
  margin-bottom: 0;
}
</style>
</head>
<body>
<h1>sinescans2</h1>
<span id="info"></span>
<canvas id="canvas" width="128" height="128"></canvas>
<button onclick="toggleFullscreen()"><svg width="16" height="16" viewBox="0 0 24 24"><path class="foo" d="M24 9h-2v-7h-7v-2h9v9zm-9 15v-2h7v-7h2v9h-9zm-15-9h2v7h7v2h-9v-9zm9-15v2h-7v7h-2v-9h9z"/></svg></button>
<p>by <a href="http://www.386dx25.de">386dx25.de</a>, 2020</p>
<script>
const canvas = document.getElementById('canvas');
const context = canvas.getContext('2d');
const info = document.getElementById("info");

var canvasData;
var imageBuffer;

var time = 0;

var roll_landscape = false;
var rotate = true;
var rotationSpeed = 0.3;
var rotationAngle = 0.0;

var currentFunc = 0;

var func_t = 0.0;
var func_a = 1.0;

function fmod(a,b) { return (a - (Math.floor(a / b) * b)); };

function powinvtent(x,a) {
    return 1.0-Math.pow(Math.abs(fmod(x,2.0)-1.0),a);
}

var funcs = [
  { name: "fancy function 1", eval: (x,y,t,a) => { return 2.5*(powinvtent(x,a)*powinvtent(y*2.0,a) - 0.7); } },
  { name: "fancy function 2", eval: (x,y,t,a) => { return 2.5*(powinvtent(x+Math.sin(y*2.0),a) - 0.7); } },
  { name: "tent",     eval: (x,y,t,a) => { return Math.max(5*Math.min(1 - Math.abs(.75*x),1 - Math.abs(.75*y)),0); } },
  { name: "Gaussian", eval: (x,y,t,a) => { return 3*Math.exp(-((x-1.5)*(x-1.5)+y*y)/0.5); } },
  { name: "Bessel",   eval: (x,y,t,a) => { return 0.5*Math.sin(Math.PI*x)*Math.sin(Math.PI*y)/(x*y); } },
  { name: "plasma",   eval: (x,y,t,a) => { return 2*Math.cos(Math.PI*x/2.5)*Math.sin(Math.PI*y/2.5); } },
  { name: "saddle",   eval: (x,y,t,a) => { return x*y; } },
  { name: "sigmoid",  eval: (x,y,t,a) => { return 4*(1/(1+Math.exp(-4*x)) - 0.5); } },
];


function updateInfo() {  
  if(info) {
    info.innerHTML = funcs[currentFunc].name;
  }
}

var transition = {
  inProgress: false,
  lambda: 0,
  fromIndex: 0,
  toIndex: 0,
  start( startTime, fromIndex, toIndex ) {
    if( !this.inProgress ) {
      this.inProgress = true;
      this.fromIndex = fromIndex;
      this.toIndex = toIndex
      this.startTime = startTime;
      this.lambda = 0.0;
    }
  },  
  update( time ) { // returns false on transition done
    if( this.inProgress )
    {
      this.lambda = time - this.startTime;
      if( this.lambda >= 1.0 )
      {
        this.lambda = 1.0;
        this.inProgress = false;
        return false;
      }
    }
    return true;
  }
}

function requestTransition( step ) {
  console.log(step);
  if(step < 0) step = funcs.length + step;
  transition.start( time, currentFunc, (currentFunc + step) % funcs.length );
}

function evalFunc(x,y) {
  if( transition.inProgress )
    return (1-transition.lambda)*funcs[transition.fromIndex].eval(x,y,func_t,func_a) + transition.lambda*funcs[transition.toIndex].eval(x,y,func_t,func_a);
  else
    return funcs[currentFunc].eval(x,y,func_t,func_a);
}

function pset( x,y, r,g,b,a ) {
  var index = (x + y * canvas.width) * 4;
  if( index>0 && index<(canvas.width*canvas.height*4) )
  {
    imageBuffer[index + 0] = r;
    imageBuffer[index + 1] = g;
    imageBuffer[index + 2] = b;
    imageBuffer[index + 3] = a;
  }
}

function drawLandscape() {
  var aspect = canvas.width / canvas.height;

  const dh=0.2;
  const dhmax=2;
  const unitheight=dh*canvas.height;
  var zmin=0;
  
  var dz=0.0;
  var xn=0.0;
  var yn=0.0;
  var f=0.0;
  var zi=0;
  
  var sin_a = Math.sin(rotationAngle);
  var cos_a = Math.cos(rotationAngle);
  var x = 0.0;
  var y = 0.0;
  
  for( var xi=0; xi < canvas.width; xi++ ) {
    zmin=canvas.height;
    
    const stepsize = 0.1;
    const nsteps = (dhmax - dh) / stepsize;
    for( var istep=0; istep < nsteps; ++istep ) {
      
      var ofs = 0.0;
      if( roll_landscape )
        ofs = Math.abs((Math.floor(0.25*time*1000)%1000)/1000.0);
      var dy = dh + (istep + ofs)*stepsize;
      
      dz = 1/((dy+1)*(dy+1));
      xn = aspect*(xi-canvas.width*0.5)/canvas.width/dz;
      yn = 2*(dy-dh)/(dhmax-dh) - 0.5;

      const scale = 2.5;
      xn = xn*scale;
      yn = yn*scale;

      x = -cos_a*xn + sin_a*yn;
      y =  sin_a*xn + cos_a*yn;

      f = evalFunc(x,y);

      zf = dz*canvas.height - f*dz*unitheight;
      zi = Math.floor(zf);
      zd = zf - zi;
      if( zi < zmin ) {
        zmin = zi;
        
        var fade = 1;
        if(roll_landscape) {
          if( istep===0 ) fade = ofs;
          else if( istep===nsteps-1 ) fade = 1-ofs;
        }
        pset( xi,zi,   dy*255,0,255,fade*255*(1.0-Math.abs(zd)) );
        pset( xi,zi+1, dy*255,0,255,fade*255*Math.abs(zd) );
      }
    }
  }

  context.putImageData( canvasData, 0,0 );
}

function updateGlobals() {
  canvas.width = window.innerWidth;
  canvas.height = Math.max(window.innerHeight-160,280);
  
  canvas.width  = canvas.width;
  canvas.height = canvas.height;
  
  context.clearRect(0,0,canvas.width,canvas.height);
  canvasData = context.getImageData(0, 0, canvas.width, canvas.height);
  imageBuffer = canvasData.data;
}

function updateAnimation( dt ) {
  func_t = time*0.2; 
  func_a = 3.5*Math.sin(func_t)*Math.sin(func_t)+0.5;
  
  if( rotate ) {
    rotationAngle += rotationSpeed * dt*0.001
  }
  
  if( !transition.update(time) ) {
    currentFunc = transition.toIndex;
    updateInfo();
  }
}

function updateAll(dt) {
  time = time + dt*0.001;
  updateGlobals();
  updateAnimation(dt);
  drawLandscape();
}

let t0;
let tlast;
function update(timestamp) {
  if(t0 === undefined) {
    t0 = timestamp;
    tlast = timestamp;
  }            
  const dt = timestamp - tlast;
  updateAll(dt);
  window.requestAnimationFrame(update);
  tlast = timestamp;
}  

var control = {
  active: false,
  delta: [0, 0],
  startPos: [0,0],
  startRotationSpeed: 0,
  down: function(x,y) {
    this.active = true;
    this.startPos = [x,y];
    this.startRotationSpeed = rotationSpeed;
  },
  up: function() {
    this.active = false;
  },
  move: function(x,y) {
    if(this.active) {
      this.delta = [x-this.startPos[0], y-this.startPos[1]];
      rotationSpeed = Math.min(Math.max(this.startRotationSpeed + this.delta[0], -0.2*Math.PI), 0.2*Math.PI);
      
      if(this.delta[1] >  0.15) requestTransition(+1); else
      if(this.delta[1] < -0.15) requestTransition(-1);
    }
  },
};

function getPositionInCanvas(canvas, e) {
  const c = e.touches ? e.touches[0] : e;
  const rect = canvas.getBoundingClientRect(e);
  return {
    x: (c.clientX - rect.left) * (canvas.width / rect.width),
    y: (c.clientY - rect.top) * (canvas.height / rect.height)
  }
}

function getRelativePositionInCanvas(canvas, e) {
  const pos = getPositionInCanvas(canvas, e);
  pos.x /= canvas.width;
  pos.y /= canvas.height;
  return pos;
}

updateInfo();
window.requestAnimationFrame(update);

canvas.addEventListener("mousedown", (e) => { const pos=getRelativePositionInCanvas(canvas, e); control.down(pos.x,pos.y); });
canvas.addEventListener("mouseup",   (e) => { const pos=getRelativePositionInCanvas(canvas, e); control.up  (pos.x,pos.y); });
canvas.addEventListener("mouseout",  (e) => { const pos=getRelativePositionInCanvas(canvas, e); control.up  (pos.x,pos.y); });
canvas.addEventListener("mousemove", (e) => { const pos=getRelativePositionInCanvas(canvas, e); control.move(pos.x,pos.y); });

canvas.addEventListener("touchstart",(e) => { const pos=getRelativePositionInCanvas(canvas, e); control.down(pos.x,pos.y); }, { passive: false });
canvas.addEventListener("touchend",  (e) => { const pos=getRelativePositionInCanvas(canvas, e); control.up  (pos.x,pos.y); }, { passive: false });
canvas.addEventListener("touchcancel",(e)=> { const pos=getRelativePositionInCanvas(canvas, e); control.up  (pos.x,pos.y); }, { passive: false });
canvas.addEventListener("touchmove", (e) => { const pos=getRelativePositionInCanvas(canvas, e); control.move(pos.x,pos.y); }, { passive: false });


var fullscreen = false;

function requestFullscreen( elem ) {
  if (!elem) return;
  fullscreen = true;
  if (elem.requestFullscreen) {
    elem.requestFullscreen();
  } else if (elem.mozRequestFullScreen) {
    elem.mozRequestFullScreen();
  } else if (elem.webkitRequestFullscreen) {
    elem.webkitRequestFullscreen();
  } else if (elem.msRequestFullscreen) {
    elem.msRequestFullscreen();
  } else {
    fullscreen = false;
  }
}

function exitFullscreen() {
  fullscreen = false;
  if (document.exitFullscreen) {
    document.exitFullscreen();
  } else if (document.mozCancelFullScreen) {
    document.mozCancelFullScreen();
  } else if (document.webkitExitFullscreen) {
    document.webkitExitFullscreen();
  } else if (document.msExitFullscreen) {
    document.msExitFullscreen();
  }
}

function toggleFullscreen() {
  if(fullscreen)
    exitFullscreen();
  else
    requestFullscreen(document.documentElement);
}
</script>
</body>
</html>