<!DOCTYPE html>
<!-- www.386dx25.de 2019 -->
<html lang="en">
<head><meta charset="utf-8"/>
<title>Chladni flower</title>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<meta name="author" content="386dx25, mnemonic@386dx25.de"/>
<script src="app2.js" type="text/javascript"></script>
<script src="demo.js" type="text/javascript"></script>
<script id="shadertoy" type="x-shader/x-fragment">
// Raycast a sphere deformed by a flow from a trigonometric velocity field.

#define ISO 1.2   // isosurface value to visualize
#define EULER 3   // number of Euler steps in integrating the velocity field

uniform float stepsize; // raycaster stepsize w.r.t. unit volume
uniform vec2 mn; // (e.g. =vec2(5.0,3.0)) knot numbers of Chladni pattern

float alpha = 0.;  // rotation angle of superposition coefficients

const float pi = 3.1415926535897932384;

void animate()
{
  // Uncomment to use mouse
  //mn = 7.0 * iMouse.xy / iResolution.xy; 
  
  // Uncomment for alternative animation
  //float s=iTime*0.1;
  //mn = 1.5*vec2(sin(1.3*s+.3)+0.5,cos(s)+1.0)+1.0*vec2(cos(s*.1+.7)+1.0);
  
  alpha = iTime;
}

// Gradient of Chladni 2D superposed eigenfunctions (arbitrary scaled)
vec2 dfun( vec2 uv, vec2 mn, vec2 c )
{
  return 0.3*vec2( -c.x*sin(pi*mn.x*uv.x)*cos(pi*mn.y*uv.y)
                   -c.y*sin(pi*mn.y*uv.x)*cos(pi*mn.x*uv.y),
                   -c.x*cos(pi*mn.x*uv.x)*sin(pi*mn.y*uv.y)
                   -c.y*cos(pi*mn.y*uv.x)*sin(pi*mn.x*uv.y) );
}
// Velocity field
vec3 vel( vec3 p )
{
  // Superposition coefficients
  vec2 c = mat2( cos(alpha), sin(alpha), 
                -sin(alpha), cos(alpha) ) * vec2(1.0,-1.0);
  return vec3(dfun(p.xy,mn,c),0);
}

// Integrate velocity field via Euler-steps (backwards)
vec3 integrate( vec3 x0 )
{
  vec3 x = x0;
  float h = 1.0 / float(EULER);
  for( int k=0; k < EULER; k++ )
    x = x - h * vel( x );
  return (x-x0);
}

// Scalar field, warped by a flow, i.e. integrated velocity field
float field( vec3 p )
{
  p += integrate(p); // deformation
  return dot(p,p); // sphere
}

// Gradient of (deformed) scalar field via central differences
vec3 grad( vec3 p )
{
  mat3 d = mat3(0.01);
  return vec3( field(p-d[0]) - field(p+d[0]),
               field(p-d[1]) - field(p+d[1]),
               field(p-d[2]) - field(p+d[2]) );
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
  vec3 rb = vec3(1.);  // background color
  vec3 rd = vec3(.9);  // diffuse color
  vec3 rs = vec3(1.);  // specular color
  
  // normalized pixel coordinate
  vec2 npc = 2.0*fragCoord/iResolution.xy - vec2(1.0,1.0);
  npc.y /= iResolution.x/iResolution.y;
  
  // fade background radially, interlaced lines
  float l = length(npc);
  vec3 bg = 1.-(1.-l)*rb*mod(fragCoord.y,3.0);
  
  // skip raycasting beyond a central disc
  if( l > .9 )
  {
    fragColor = vec4(bg,1);
    return;
  }
   
  animate();
  
  // raycaster
  vec3 p0 = vec3(npc,-1.0);
  vec3 eye = vec3(0.0,0.0,-2.0);
  vec3 dir = normalize(p0 - eye);
  vec4 dst = vec4(bg,1.);
  for( int i=0; i < 100; ++i )
  {
    float s = float(i)*stepsize;
    if( s >= 1.0 )
      break;
      
    vec3 p = p0 + s*dir;
    float val = field(p);
    
    // isosurface, shaded
    if( val < ISO )
    {
      vec3 l = normalize(vec3(0.5,-0.5,1.0));
      vec3 n = normalize(grad(p));
      vec3 h = normalize(0.5*(l+dir));
      
      float diff = max(0.0,dot(n,l));
      float spec = pow(dot(h,n),42.0);      
      
      // artificial sky reflection
      vec3 v = -dir;
      vec3 r = v - 2.*dot(v,n)*n;
      float h0 = max(r.y,0.0);
      float h1 = max(-r.y,0.0);
      vec3 c = cos(31.0*r);
      vec3 refl = 1.2*vec3(1,1,1)*h0*c.x + 1.7*vec3(.8,.9,1)*h1;
     
      dst = .7*vec4(0.42*rd*diff + 1.0*rs*spec + 0.5*refl, 1.0);      
      break;
    }
  }
  fragColor = dst;
}
</script>
<style>
html, body {
  width:  100%;
  height: 100%;
  margin: 0;
  overflow: hidden;
  text-align: center;
  // https://www.arungudelli.com/tutorial/css/disable-text-selection-in-html-using-user-select-css-property/
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}
#glcanvas {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  z-index: -1;
}
footer {
  position: absolute;
  bottom: 0px;
  left: 0px;
  width: 100%;
}
</style>
</head>
<body onresize="resize()">
<h1 style="margin-bottom:0pt;">Chladni flower</h1>
<div><span id="knotInfo"></span></div>
<canvas id="glcanvas" width="320" height="320"></canvas>
<div style="position: fixed; top: 5px; right: 5px; color:#aaa">
  <input size="2" id="framerate" style="border: 0; text-align: right; color:#aaa"> fps
  <button onclick="toggleFullscreen()"><svg width="16" height="16" viewBox="0 0 24 24"><path class="foo" d="M24 9h-2v-7h-7v-2h9v9zm-9 15v-2h7v-7h2v9h-9zm-15-9h2v7h7v2h-9v-9zm9-15v2h-7v7h-2v-9h9z"/></svg></button>
</div>
<footer>by <a href="http://www.386dx25.de">386dx25.de</a>, 2019</footer>
<script>
var canvas = document.getElementById("glcanvas");
var knotVector = [5.0, 3.0];

function resize() {
  if(canvas) {
    const size = Math.max( 128, Math.min( 768, Math.floor(0.8*Math.min(window.innerWidth, window.innerHeight)) ));
    canvas.width = size;
    canvas.height = size;
    APP.setup("glcanvas");
    updateKnotInfo();

    const vertical_layout = window.innerWidth > window.innerHeight;
    if( vertical_layout ) {
      canvas.style.width = "auto";
      canvas.style.height = "100%";
      canvas.style.left = window.innerWidth/2 - window.innerHeight/2 + "px";
    } else {
      canvas.style.width = "100%";
      canvas.style.height = "auto";
      canvas.style.top = window.innerHeight/2 - window.innerWidth/2 + "px";
    }
  }
}


var fullscreen = false;

function requestFullscreen( elem ) {
  if (!elem) return;
  if (elem.requestFullscreen) {
    elem.requestFullscreen();
    fullscreen = true;
  } else if (elem.mozRequestFullScreen) {
    elem.mozRequestFullScreen();
    fullscreen = true;
  } else if (elem.webkitRequestFullscreen) {
    elem.webkitRequestFullscreen();
    fullscreen = true;
  } else if (elem.msRequestFullscreen) {
    elem.msRequestFullscreen();
    fullscreen = true;
  }
}

function exitFullscreen() {
  if (document.exitFullscreen) {
    document.exitFullscreen();
    fullscreen = false;
  } else if (document.mozCancelFullScreen) {
    document.mozCancelFullScreen();
    fullscreen = false;
  } else if (document.webkitExitFullscreen) {
    document.webkitExitFullscreen();
    fullscreen = false;
  } else if (document.msExitFullscreen) {
    document.msExitFullscreen();
    fullscreen = false;
  }
}

function toggleFullscreen() {
  if(fullscreen)
    exitFullscreen();
  else
    requestFullscreen(document.documentElement);
}


function updateKnotInfo() {
  var info = document.getElementById("knotInfo");
  if(info) {
    info.innerHTML = "(" + knotVector[0].toFixed(2) + ", " + knotVector[1].toFixed(2) + ")";
  }
}

function touchAndClickHandler(e) {
  e.preventDefault();
  if(e.buttons || e.touches) {
    let et = e.touches ? e.touches[0] : e;
    knotVector[0] = 7.0 * et.clientX / window.innerWidth;
    knotVector[1] = 7.0 * et.clientY / window.innerHeight;
    updateKnotInfo();
  }
}

window.onload = function() {
  DEMO.updateCustomUniforms = function(gl,program) {
    gl.uniform1f( gl.getUniformLocation(program,'stepsize'), 0.023 );
    gl.uniform2f( gl.getUniformLocation(program,'mn'), knotVector[0], knotVector[1] );
  }
  
  APP.common.loglevel = 1;
  APP.setup("glcanvas");
  APP.core.init();
  APP.core.frame();
  resize();
  
  document.addEventListener("touchstart", touchAndClickHandler);
  document.addEventListener("touchmove", touchAndClickHandler);
  document.addEventListener("mousedown", touchAndClickHandler);
  document.addEventListener("mousemove", touchAndClickHandler);
  window.addEventListener('resize', resize, false);
}
</script>
</body>
</html>